`timescale 1ns / 1ps

//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer:        Jose Manuel Gonzalez Garcia
// 
// Create Date:    10:37:46 12/17/2018 
// Design Name: 
// Module Name:    main 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: Designed to run in a FPGA Spartan 3E
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////

module main( clk, START, REACT, GO, sf_e, e, rs, rw, d, c, b, a);

	(* LOC = "C9" *) input clk; 			// pin C9 is the 50 MHz on board clock
	(* LOC = "D18" *) input START;
	(* LOC = "L13" *) input REACT;
	(* LOC = "D16" *) output reg sf_e; 		// 1 LCD access (0 StrataFlash access)
	(* LOC = "M18" *) output reg e;			// enable
	(* LOC = "L18" *) output reg rs;		// Register select (1 data bit for R/W)
	(* LOC = "L17" *) output reg rw; 		// Read/Write 1/0
	(* LOC = "M15" *) output reg d;			// 4th data bits (to form a nibble)
	(* LOC = "P17" *) output reg c;			// 3rd data bits (to form a nibble)
	(* LOC = "R16" *) output reg b; 		// 2nd data bits (to form a nibble)
	(* LOC = "R15" *) output reg a;			// 1st data bist (to form a nibble)
	(* LOC = "F11" *) output reg GO;

	parameter [3:0]
		S0 = 4'b0001,
		S1 = 4'b0010,
		S2 = 4'b0100,
		S3 = 4'b1000;
	reg [ 29 : 0] count_delay;
	reg [ 27 : 0 ] count_2;
	reg [ 3 : 0 ] count_3;
	reg [ 3 : 0 ] count_4;
	reg [ 3 : 0 ] count_5;
	reg [ 3 : 0 ] count_6;
	reg [ 28 : 0] delay ;
	reg [ 3 : 0 ] current_state, next_state; 
	reg [ 26 : 0 ] count ;			// 27-bit count, 0-(128M-1), over 2 secs
	reg [ 5 : 0 ] code;			// 6-bit different signals to give out
	reg [ 5 : 0 ] a_1;
	reg [ 5 : 0 ] a_2;
	reg [ 5 : 0 ] a_3;
	reg [ 5 : 0 ] a_4;
	reg refresh;					// refresh LCD rate @ about 25 Hz
	reg boolean_delay;
	
	always @ (posedge clk)
		begin
			current_state <= next_state;

			count <= count + 1;
			
			if (count_delay < 29'b11111111111111111111111111111) count_delay <= count_delay + 1'b1;
			else if (count_delay >= 29'b11111111111111111111111111111) count_delay <= 29'b0;
			
			case ( count[ 26 : 21 ] )		// as top 6 bits change
													// power-on init can be carried out before
													// this loop to avoid the
				0: code <= 6'h03;		// power-on init sequence
				1: code <= 6'h03;		// this is needed at least once
				2: code <= 6'h03;		// when LCD's powered on
				3: code <= 6'h02;		// it flickers existing char display

				4: code <= 6'h02;
				5: code <= 6'h08;
				
				6: code <= 6'h00;
				7: code <= 6'h06;
				
				8: code <= 6'h00;
				9: code <= 6'h0C;
				
				10: code <= 6'h00;
				11: code <= 6'h01;
				
				12: code <= 6'h25;		// R
				13: code <= 6'h22;
				14: code <= 6'h26;		//	e		
				15: code <= 6'h25;
				16: code <= 6'h26;		//	a
				17: code <= 6'h21;
				18: code <= 6'h26;		//	c
				19: code <= 6'h23;
				20: code <= 6'h27;		//	t
				21: code <= 6'h24;
				22: code <= 6'h23;		//	:
				23: code <= 6'h2A;
				
				24: code <= 6'b001100;
				25: code <= 6'b000000;
				
				26: code <= 6'h23;		//	Segundos
				27: code <= a_4;
				
				28: code <= 6'h22;		//	.
				29: code <= 6'h2C;
				
				30: code <= 6'h23;		//	100* ms
				31: code <= a_3;
				32: code <= 6'h23;		//	l0* ms
				33: code <= a_2;
				34: code <= 6'h23;		//	ms
				35: code <= a_1;
				36: code <= 6'h22;		//	!
				37: code <= 6'h21;
				
				default: code <= 6'h10;
			endcase
			
			refresh <= count [20];
			sf_e <= 1;
			{ e, rs, rw, d, c, b, a} <= { refresh, code};
			
		end
	
	always @( START or REACT or boolean_delay)
		begin
			
			next_state = 4'b0001;

			case (current_state)
				S0: 
					begin
						if (START) next_state = S1;
						else if (!START) next_state = S0;
					end
				S1:
					begin
						if (delay == 15'd0) next_state = S2;
						else if (delay >= 15'd0001) next_state = S1;
					end
				S2:
					begin
						
						if (REACT) next_state = S3;
						else if (!REACT) next_state = S2;
					end
				S3: next_state = S0;
				default: next_state = S0;
			endcase
		end
	
	always @(posedge clk)
		begin
			GO <= 1'b0;

			delay[20:17] <= count_delay[3:0] << 1;
			
			count_2 <= 28'b0;
			count_3 <= 4'b0;
			count_4 <= 4'b0;
			count_5 <= 4'b0;
			count_6 <= 4'b0;
			boolean_delay <= 1'b0;

			case (next_state)
				S0:;
				S1: 
					begin
						delay <= delay - 1'b1;
						if (delay <= 15'b100) boolean_delay <= 1'b1;
					end
				S2: 
					begin
						GO <= 1'b1;
						count_3 <= count_3;
						count_4 <= count_4;
						count_5 <= count_5;
						count_6 <= count_6;
						
						if (count_2 < 28'b1100001101010000) 
							begin
								count_2 <= count_2 + 1'b1;
							end
						else if (count_2 >= 28'b1100001101010000)
							begin
							
								count_2 <= 28'b0;
								
								if (count_3 < 4'b1001)
								begin
									count_3 <= count_3 +1'b1;

								end
								
								else if(count_3 >= 4'b1001) 
									begin

										count_3 <= 4'b0;
										if ( count_4 < 4'b1001) count_4 <= count_4 + 1'b1;
										else if(count_4 >= 4'b1001)
											begin
												count_4 <= 4'b0;
												
												if (count_5 < 4'b1001) count_5 <= count_5 +1'b1;
												else if (count_5 >= 4'b1001)
													begin
														count_5 <= 4'b0;
														
														if (count_6 < 4'b1001) count_6 <= count_6 +1'b1;
														else if ( count_6 >= 4'b1001)
															begin
																count_6 <= 4'b0;
															end
													end
											end
									end
							end
					end
				S3:
					begin
						case (count_3)
							4'b0000: a_1 <= 6'h20;
							4'b0001: a_1 <= 6'h21;
							4'b0010: a_1 <= 6'h22;
							4'b0011: a_1 <= 6'h23;
							4'b0100: a_1 <= 6'h24;
							4'b0101: a_1 <= 6'h25;
							4'b0110: a_1 <= 6'h26;
							4'b0111: a_1 <= 6'h27;
							4'b1000: a_1 <= 6'h28;
							4'b1001: a_1 <= 6'h29;
							default : a_1 <= 6'h20;
						endcase
						
						case (count_4)
							4'b0000: a_2 <= 6'h20;
							4'b0001: a_2 <= 6'h21;
							4'b0010: a_2 <= 6'h22;
							4'b0011: a_2 <= 6'h23;
							4'b0100: a_2 <= 6'h24;
							4'b0101: a_2 <= 6'h25;
							4'b0110: a_2 <= 6'h26;
							4'b0111: a_2 <= 6'h27;
							4'b1000: a_2 <= 6'h28;
							4'b1001: a_2 <= 6'h29;
							default : a_2 <= 6'h20;
						endcase
						
						case (count_5)
							4'b0000: a_3 <= 6'h20;
							4'b0001: a_3 <= 6'h21;
							4'b0010: a_3 <= 6'h22;
							4'b0011: a_3 <= 6'h23;
							4'b0100: a_3 <= 6'h24;
							4'b0101: a_3 <= 6'h25;
							4'b0110: a_3 <= 6'h26;
							4'b0111: a_3 <= 6'h27;
							4'b1000: a_3 <= 6'h28;
							4'b1001: a_3 <= 6'h29;
							default : a_3 <= 6'h20;
						endcase
						
						case (count_6)
							4'b0000: a_4 <= 6'h20;
							4'b0001: a_4 <= 6'h21;
							4'b0010: a_4 <= 6'h22;
							4'b0011: a_4 <= 6'h23;
							4'b0100: a_4 <= 6'h24;
							4'b0101: a_4 <= 6'h25;
							4'b0110: a_4 <= 6'h26;
							4'b0111: a_4 <= 6'h27;
							4'b1000: a_4 <= 6'h28;
							4'b1001: a_4 <= 6'h29;
							default : a_4 <= 6'h20;
						endcase
					end
			endcase
		end
endmodule
